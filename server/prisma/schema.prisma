// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  avatar    String?
  role      UserRole @default(GUEST)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  createdTenants Tenant[] @relation("TenantCreator")
  tenantAdmins   TenantAdmin[]
  eventUsers     EventUser[]

  @@map("users")
}

model Tenant {
  id        String   @id @default(cuid())
  placeName String
  subdomain String   @unique
  svgPath   String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  createdBy    String
  creator      User          @relation("TenantCreator", fields: [createdBy], references: [id])
  admins       TenantAdmin[]
  events       Event[]

  @@map("tenants")
}

model TenantAdmin {
  id       String @id @default(cuid())
  userId   String
  tenantId String

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([userId, tenantId])
  @@map("tenant_admins")
}

model Event {
  id           String    @id @default(cuid())
  tenantId     String
  eventName    String
  locationName String
  eventType    EventType @default(OPEN)
  shareLink    String?   @unique
  description  String?
  startDate    DateTime?
  endDate      DateTime?
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  tenant     Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  eventUsers EventUser[]

  @@map("events")
}

model EventUser {
  id        String           @id @default(cuid())
  eventId   String
  userId    String?
  name      String
  email     String
  phone     String?
  status    RegistrationStatus @default(PENDING)
  qrCode    String?          @unique
  scanned   Boolean          @default(false)
  scannedAt DateTime?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  // Relations
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user  User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@unique([eventId, email])
  @@map("event_users")
}

enum UserRole {
  SUPER_ADMIN
  TENANT_ADMIN
  GUEST
}

enum EventType {
  OPEN
  CLOSED
}

enum RegistrationStatus {
  PENDING
  APPROVED
  REJECTED
}
